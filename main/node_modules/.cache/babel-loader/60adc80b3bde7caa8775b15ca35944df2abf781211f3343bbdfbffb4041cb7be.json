{"ast":null,"code":"var _jsxFileName = \"/Users/gim-yeongchan/\\u1100\\u116D\\u110B\\u116C/Farm2/main/src/components/MyCal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyCalendar = ({\n  allpatient\n}) => {\n  _s();\n  const [value, onChange] = useState(new Date());\n  const [reservedDates, setReservedDates] = useState([]);\n  useEffect(() => {\n    // 예약된 환자들의 날짜와 patientstate 추출\n    const dates = allpatient.filter(patient => patient.reservationDate && patient.patientstate).map(patient => ({\n      date: new Date(patient.reservationDate),\n      state: patient.patientstate,\n      name: patient.patientName\n    }));\n    setReservedDates(dates);\n  }, [allpatient]);\n\n  // tileContent 함수 정의\n  const tileContent = ({\n    date,\n    view\n  }) => {\n    // 'month' 뷰에서만 동작하도록 설정\n    if (view === \"month\") {\n      // date와 일치하는 예약된 환자가 있는지 확인\n      const matchingReservation = reservedDates.find(reservation => date.getFullYear() === reservation.date.getFullYear() && date.getMonth() === reservation.date.getMonth() && date.getDate() === reservation.date.getDate());\n\n      // 예약이 있는 경우 해당 환자의 patientstate 표시\n      if (matchingReservation) {\n        const textColor = matchingReservation.state === \"예약완료\" ? \"blue\" : \"green\";\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: textColor,\n            fontSize: \"8px\"\n          },\n          children: [matchingReservation.state, \" \", matchingReservation.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this);\n      }\n    }\n\n    // 예약이 없는 경우 빈 값 반환\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar-container\",\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      onChange: onChange,\n      value: value,\n      tileContent: tileContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(MyCalendar, \"+eVX4H5Ah5V0j7bsKXsuqBojgyk=\");\n_c = MyCalendar;\nexport default MyCalendar;\nvar _c;\n$RefreshReg$(_c, \"MyCalendar\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","jsxDEV","_jsxDEV","MyCalendar","allpatient","_s","value","onChange","Date","reservedDates","setReservedDates","dates","filter","patient","reservationDate","patientstate","map","date","state","name","patientName","tileContent","view","matchingReservation","find","reservation","getFullYear","getMonth","getDate","textColor","style","color","fontSize","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/Users/gim-yeongchan/교외/Farm2/main/src/components/MyCal.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\n\nconst MyCalendar = ({ allpatient }) => {\n  const [value, onChange] = useState(new Date());\n  const [reservedDates, setReservedDates] = useState([]);\n\n  useEffect(() => {\n    // 예약된 환자들의 날짜와 patientstate 추출\n    const dates = allpatient\n      .filter((patient) => patient.reservationDate && patient.patientstate)\n      .map((patient) => ({\n        date: new Date(patient.reservationDate),\n        state: patient.patientstate,\n        name: patient.patientName,\n      }));\n\n    setReservedDates(dates);\n  }, [allpatient]);\n\n  // tileContent 함수 정의\n  const tileContent = ({ date, view }) => {\n    // 'month' 뷰에서만 동작하도록 설정\n    if (view === \"month\") {\n      // date와 일치하는 예약된 환자가 있는지 확인\n      const matchingReservation = reservedDates.find(\n        (reservation) =>\n          date.getFullYear() === reservation.date.getFullYear() &&\n          date.getMonth() === reservation.date.getMonth() &&\n          date.getDate() === reservation.date.getDate()\n      );\n\n      // 예약이 있는 경우 해당 환자의 patientstate 표시\n      if (matchingReservation) {\n        const textColor =\n          matchingReservation.state === \"예약완료\" ? \"blue\" : \"green\";\n        return (\n          <div style={{ color: textColor, fontSize: \"8px\" }}>\n            {matchingReservation.state} {matchingReservation.name}\n          </div>\n        );\n      }\n    }\n\n    // 예약이 없는 경우 빈 값 반환\n    return null;\n  };\n\n  return (\n    <div className=\"calendar-container\">\n      <Calendar onChange={onChange} value={value} tileContent={tileContent} />\n    </div>\n  );\n};\n\nexport default MyCalendar;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAO,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAIU,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,KAAK,GAAGP,UAAU,CACrBQ,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACC,eAAe,IAAID,OAAO,CAACE,YAAY,CAAC,CACpEC,GAAG,CAAEH,OAAO,KAAM;MACjBI,IAAI,EAAE,IAAIT,IAAI,CAACK,OAAO,CAACC,eAAe,CAAC;MACvCI,KAAK,EAAEL,OAAO,CAACE,YAAY;MAC3BI,IAAI,EAAEN,OAAO,CAACO;IAChB,CAAC,CAAC,CAAC;IAELV,gBAAgB,CAACC,KAAK,CAAC;EACzB,CAAC,EAAE,CAACP,UAAU,CAAC,CAAC;;EAEhB;EACA,MAAMiB,WAAW,GAAGA,CAAC;IAAEJ,IAAI;IAAEK;EAAK,CAAC,KAAK;IACtC;IACA,IAAIA,IAAI,KAAK,OAAO,EAAE;MACpB;MACA,MAAMC,mBAAmB,GAAGd,aAAa,CAACe,IAAI,CAC3CC,WAAW,IACVR,IAAI,CAACS,WAAW,CAAC,CAAC,KAAKD,WAAW,CAACR,IAAI,CAACS,WAAW,CAAC,CAAC,IACrDT,IAAI,CAACU,QAAQ,CAAC,CAAC,KAAKF,WAAW,CAACR,IAAI,CAACU,QAAQ,CAAC,CAAC,IAC/CV,IAAI,CAACW,OAAO,CAAC,CAAC,KAAKH,WAAW,CAACR,IAAI,CAACW,OAAO,CAAC,CAChD,CAAC;;MAED;MACA,IAAIL,mBAAmB,EAAE;QACvB,MAAMM,SAAS,GACbN,mBAAmB,CAACL,KAAK,KAAK,MAAM,GAAG,MAAM,GAAG,OAAO;QACzD,oBACEhB,OAAA;UAAK4B,KAAK,EAAE;YAAEC,KAAK,EAAEF,SAAS;YAAEG,QAAQ,EAAE;UAAM,CAAE;UAAAC,QAAA,GAC/CV,mBAAmB,CAACL,KAAK,EAAC,GAAC,EAACK,mBAAmB,CAACJ,IAAI;QAAA;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClD,CAAC;MAEV;IACF;;IAEA;IACA,OAAO,IAAI;EACb,CAAC;EAED,oBACEnC,OAAA;IAAKoC,SAAS,EAAC,oBAAoB;IAAAL,QAAA,eACjC/B,OAAA,CAACF,QAAQ;MAACO,QAAQ,EAAEA,QAAS;MAACD,KAAK,EAAEA,KAAM;MAACe,WAAW,EAAEA;IAAY;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrE,CAAC;AAEV,CAAC;AAAChC,EAAA,CAlDIF,UAAU;AAAAoC,EAAA,GAAVpC,UAAU;AAoDhB,eAAeA,UAAU;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}